/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package pkl49.control;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import pkl49.view.PanelKuesioner;

/**
 *
 * @author Mr.Hands
 */
public class ProgressProcess extends javax.swing.JPanel{


    private PanelKuesioner kuesioner;
    /**Sebagai penanda untuk proses yang akan dikerjakan*/
    private String key;
    /**Menunjukan status dari suatu proses. Berhasil = 1, Gagal = 0*/
    private int status;

    /** Creates new form PanelInput */
    public ProgressProcess() {
        setOpaque(false);
        addMouseListener(new MouseListener() {

            public void mouseClicked(MouseEvent e) {

            }

            public void mousePressed(MouseEvent e) {

            }

            public void mouseReleased(MouseEvent e) {

            }

            public void mouseEntered(MouseEvent e) {

            }

            public void mouseExited(MouseEvent e) {

            }
        });
        addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyReleased(KeyEvent e) {

            }

            @Override
            public void keyTyped(KeyEvent e) {

            }

        });

    }

    public String getKey() {
        return key;
    }

    public void setKey(String key) {
        this.key = key;
    }

    public PanelKuesioner getKuesioner() {
        return kuesioner;
    }

    public void setKuesioner(PanelKuesioner kuesioner) {
        this.kuesioner = kuesioner;
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */


    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D gd = (Graphics2D) g.create();
        int w = getWidth();
        int h = getHeight();
        gd.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        gd.setColor(new Color(1f, 1f, 1f, 0.5f));
        gd.fillRect(0, 0, w, h);
        gd.dispose();
    }

    public void execute(){
        Task task = new Task();
        task.execute();
    }

    class Task extends SwingWorker<Object, Object>{

        @Override
        protected Object doInBackground() throws Exception {
            proses();
            return null;
        }

        @Override
        protected void done() {
            selesai();
        }
    }

    private void proses(){
        if(key.equals("simpan")){
            status = Controller.simpanKuesioner(kuesioner);
        }else if(key.equals("update")){
            status = Controller.simpanKuesioner(kuesioner);
        }
    }
    private void selesai(){
        setVisible(false);
        Toolkit.getDefaultToolkit().beep();
        if(key.equals("simpan")){
            if(status == 1){
                JOptionPane.showMessageDialog(kuesioner, "Data berhasil disimpan!");
            }else{
                JOptionPane.showMessageDialog(kuesioner, "Data gagal disimpan!");
            }
        }else if(key.equals("update")){
            if(status == 1){
                JOptionPane.showMessageDialog(kuesioner, "Data berhasil diupdate!");
            }else{
                JOptionPane.showMessageDialog(kuesioner, "Data gagal diupdate!");
            }
        }

    }

}
